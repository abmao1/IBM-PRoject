---
title: "Mao, Andrew M12-Reflection Essay-Adv Program in R."
subtitle: "Module 12 Reflection Essay"
author: "Andrew Bruce Mao"
institute: "M12 - Advanced Programming in R, Cal Poly Pomona"
date: "`r Sys.Date()`"
format:
  revealjs:
    theme: serif
    width: 1600
    height: 900
    footer: "M12 Reflection Essay"
    transition: slide
    transition-speed: default
    incremental: true
    manual-increment: true
    toc: true
    toc-depth: 2
    slide-number: true
    scrollable: true
    smaller: true
    code-fold: false
    code-overflow: wrap
    number-sections: false
    number-depth: 5
    embed-resources: true
    css: styles.css
    background-transition: slide
editor: visual
execute:
  echo: true
  freeze: auto
---

# Step 1: Interactive Dashboard with Quarto

In Step 1, Dr. Albert Rapp’s demonstration of building an interactive dashboard with Quarto highlighted the power of unified authoring where narrative, code, and visualizations co-exist seamlessly in a single document. Unlike prior tools such as Shiny or flexdashboard, Quarto’s integration with R Markdown eliminated the need for separate server scripts, significantly streamlining the development workflow. The ability to leverage HTML widgets and customize styling through themes and CSS overrides made it exceptionally easy to achieve consistent branding and polished layouts.

-   **Unified Authoring**: Combine narrative, code, and outputs in one file {.fragment}
-   **No Separate Server Scripts**: Simplifies deployment and maintenance {.fragment}
-   **Custom Styling**: Use themes and CSS overrides for consistent branding {.fragment}

Speaker Notes: Emphasize how this approach reduces development time and fosters collaboration by keeping everything in a single source.

# Step 2: Parameterized Reporting in Quarto

Parameterized reporting in Quarto empowers users to define input parameters—such as dates, group filters, or business metrics—directly in the YAML header and reference them throughout the document using `params$<name>`. When rendering the report, these parameters can be modified via the command line or scripts to automatically generate multiple tailored outputs. In my role at Niagara Bottling, I can envision setting a `report_month` parameter to automate our monthly sales summaries, greatly reducing manual editing and ensuring consistency across distributed reports.

-   **YAML-Declared Inputs**: Define parameters at the top of the document {.fragment}
-   **Reusable Templates**: Render multiple versions without manual copy-paste {.fragment}
-   **Automated Workflows**: Integrate with scheduling for hands-free report generation {.fragment}

Speaker Notes: Mention how this feature aligns with the goal of reproducible reporting and minimizes human error.

# Step 3: Avoiding Dashboard Fatigue

Sean Nguyen’s “Beyond Dashboards” talk emphasized that effective dashboards tell a story rather than simply displaying charts. By incorporating narrative text, asides, and footnotes, viewers are guided through key insights step by step. Techniques like incremental lists and fragments can reveal information gradually, preventing cognitive overload. Furthermore, personalizing content through parameters ensures that each stakeholder sees the most relevant data, enhancing engagement and comprehension.

-   **Storytelling Flow**: Guide users with narrative and asides {.fragment}
-   **Progressive Disclosure**: Reveal insights step-by-step with fragments {.fragment}
-   **Personalization**: Use parameters to tailor views for stakeholders {.fragment}

Speaker Notes: Highlight examples of incremental reveals and the use of footnotes to clarify metrics.

# Challenges in Learning New Tools

While I appreciate how programming frameworks like Quarto enhance efficiency by automating repetitive tasks, mastering their advanced features has presented a few hurdles. Writing correct YAML syntax requires careful attention to indentation and quoting. Developing custom themes and CSS demands familiarity with Sass variables and web styling conventions. Building complex slide layouts, such as multi-column sections and scrollable content, sometimes involves delving into manual HTML or debugging layout quirks.

-   **YAML Sensitivity**: Small errors can break the build {.fragment}
-   **Theme Customization**: Sass and CSS require web development know-how {.fragment}
-   **Advanced Layouts**: Multi-column and overflow content need manual adjustments {.fragment}

Speaker Notes: Share a brief anecdote about a YAML parsing error and how you resolved it.

# Reflections on Quarto and Reproducible Reports

Completing this module has solidified my belief in literate programming and reproducible analytics workflows. Quarto’s seamless integration of code, text, interactive elements, and citations fosters transparency and collaboration across teams. Looking ahead, I plan to leverage Quarto’s parameterization and automation capabilities to embed AI-driven summaries and model outputs directly into reports, further accelerating insights delivery in the age of generative AI.

-   **Literate Programming**: Combines narrative and code for clarity {.fragment}
-   **Collaboration**: Shared documents reduce version confusion {.fragment}
-   **Future AI Integration**: Automate summaries and model outputs with AI plugins {.fragment}

Speaker Notes: Conclude by outlining your roadmap for AI-enhanced reporting and invite questions.

# Questions?

Thank you!
