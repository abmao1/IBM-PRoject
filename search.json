[
  {
    "objectID": "shinylive.html",
    "href": "shinylive.html",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive is an exciting new development in the R ecosystem that brings the power of Shiny apps to the browser—without requiring a server. It allows Shiny apps to run entirely on the client-side, meaning users can interact with your app without any backend infrastructure. This makes deployment easier, faster, and more accessible. In this essay, I will explain how Shinylive works, how it differs from traditional Shiny apps, and explore the advantages and limitations of this serverless model.\n\n\n\nShinylive is a serverless variant of Shiny developed by Posit. It compiles R code to WebAssembly, allowing the R engine to run inside the user’s web browser. This means that instead of hosting the app on a server (e.g., shinyapps.io or RStudio Connect), the entire app runs locally in the browser—similar to how JavaScript works.\nShinylive is ideal for educational tools, demos, and static site integrations. You can publish these apps using platforms like GitHub Pages or Netlify, making them cost-effective and simple to share.\n\n\n\n\n\n\n\n\n\n\n\nFeature\nTraditional Shiny App\nShinylive\n\n\n\n\nHosting\nRequires R server backend\nRuns entirely in browser\n\n\nDeployment\nVia shinyapps.io, Connect\nVia GitHub Pages, Netlify, etc\n\n\nPerformance\nSupports large data, APIs\nLimited to small/mid-size apps\n\n\nUse Cases\nEnterprise dashboards\nDemos, teaching, public sharing\n\n\n\n\n\n\n\n\n\nNo Server Needed: Eliminates the need for infrastructure, which lowers costs and complexity.\nFast Deployment: Apps can be hosted on static sites with minimal configuration.\nGreat for Teaching: Since everything runs in the browser, it’s perfect for showing concepts or simple interactivity.\n\n\n\n\n\nLimited Resources: Shinylive can’t access large databases, external APIs, or long-running computations.\nSize Constraints: Because everything must be processed in-browser, it’s not well-suited for large or sensitive datasets.\nNo Real-Time Backend: Lacks support for server-side operations like authentication, scheduled updates, or cloud processing.\n\n\n\n\n\nShinylive represents a significant shift toward low-maintenance, browser-native data apps. It’s a perfect solution for lightweight applications where server overhead is unnecessary, and it opens the door for wider sharing of R-based tools in education, reporting, and outreach. However, for more robust enterprise-grade applications, traditional Shiny still holds a crucial role. Understanding the trade-offs between these two options helps developers choose the best tool for the job."
  },
  {
    "objectID": "shinylive.html#introduction",
    "href": "shinylive.html#introduction",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive is an exciting new development in the R ecosystem that brings the power of Shiny apps to the browser—without requiring a server. It allows Shiny apps to run entirely on the client-side, meaning users can interact with your app without any backend infrastructure. This makes deployment easier, faster, and more accessible. In this essay, I will explain how Shinylive works, how it differs from traditional Shiny apps, and explore the advantages and limitations of this serverless model."
  },
  {
    "objectID": "shinylive.html#what-is-shinylive",
    "href": "shinylive.html#what-is-shinylive",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive is a serverless variant of Shiny developed by Posit. It compiles R code to WebAssembly, allowing the R engine to run inside the user’s web browser. This means that instead of hosting the app on a server (e.g., shinyapps.io or RStudio Connect), the entire app runs locally in the browser—similar to how JavaScript works.\nShinylive is ideal for educational tools, demos, and static site integrations. You can publish these apps using platforms like GitHub Pages or Netlify, making them cost-effective and simple to share."
  },
  {
    "objectID": "shinylive.html#key-differences-from-traditional-shiny",
    "href": "shinylive.html#key-differences-from-traditional-shiny",
    "title": "shinylive",
    "section": "",
    "text": "Feature\nTraditional Shiny App\nShinylive\n\n\n\n\nHosting\nRequires R server backend\nRuns entirely in browser\n\n\nDeployment\nVia shinyapps.io, Connect\nVia GitHub Pages, Netlify, etc\n\n\nPerformance\nSupports large data, APIs\nLimited to small/mid-size apps\n\n\nUse Cases\nEnterprise dashboards\nDemos, teaching, public sharing"
  },
  {
    "objectID": "shinylive.html#pros-and-cons",
    "href": "shinylive.html#pros-and-cons",
    "title": "shinylive",
    "section": "",
    "text": "No Server Needed: Eliminates the need for infrastructure, which lowers costs and complexity.\nFast Deployment: Apps can be hosted on static sites with minimal configuration.\nGreat for Teaching: Since everything runs in the browser, it’s perfect for showing concepts or simple interactivity.\n\n\n\n\n\nLimited Resources: Shinylive can’t access large databases, external APIs, or long-running computations.\nSize Constraints: Because everything must be processed in-browser, it’s not well-suited for large or sensitive datasets.\nNo Real-Time Backend: Lacks support for server-side operations like authentication, scheduled updates, or cloud processing."
  },
  {
    "objectID": "shinylive.html#conclusion",
    "href": "shinylive.html#conclusion",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive represents a significant shift toward low-maintenance, browser-native data apps. It’s a perfect solution for lightweight applications where server overhead is unnecessary, and it opens the door for wider sharing of R-based tools in education, reporting, and outreach. However, for more robust enterprise-grade applications, traditional Shiny still holds a crucial role. Understanding the trade-offs between these two options helps developers choose the best tool for the job."
  },
  {
    "objectID": "Website for Employer/shinylive.html",
    "href": "Website for Employer/shinylive.html",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive is an exciting new development in the R ecosystem that brings the power of Shiny apps to the browser—without requiring a server. It allows Shiny apps to run entirely on the client-side, meaning users can interact with your app without any backend infrastructure. This makes deployment easier, faster, and more accessible. In this essay, I will explain how Shinylive works, how it differs from traditional Shiny apps, and explore the advantages and limitations of this serverless model.\n\n\n\nShinylive is a serverless variant of Shiny developed by Posit. It compiles R code to WebAssembly, allowing the R engine to run inside the user’s web browser. This means that instead of hosting the app on a server (e.g., shinyapps.io or RStudio Connect), the entire app runs locally in the browser—similar to how JavaScript works.\nShinylive is ideal for educational tools, demos, and static site integrations. You can publish these apps using platforms like GitHub Pages or Netlify, making them cost-effective and simple to share.\n\n\n\n\n\n\n\n\n\n\n\nFeature\nTraditional Shiny App\nShinylive\n\n\n\n\nHosting\nRequires R server backend\nRuns entirely in browser\n\n\nDeployment\nVia shinyapps.io, Connect\nVia GitHub Pages, Netlify, etc\n\n\nPerformance\nSupports large data, APIs\nLimited to small/mid-size apps\n\n\nUse Cases\nEnterprise dashboards\nDemos, teaching, public sharing\n\n\n\n\n\n\n\n\n\nNo Server Needed: Eliminates the need for infrastructure, which lowers costs and complexity.\nFast Deployment: Apps can be hosted on static sites with minimal configuration.\nGreat for Teaching: Since everything runs in the browser, it’s perfect for showing concepts or simple interactivity.\n\n\n\n\n\nLimited Resources: Shinylive can’t access large databases, external APIs, or long-running computations.\nSize Constraints: Because everything must be processed in-browser, it’s not well-suited for large or sensitive datasets.\nNo Real-Time Backend: Lacks support for server-side operations like authentication, scheduled updates, or cloud processing.\n\n\n\n\n\nShinylive represents a significant shift toward low-maintenance, browser-native data apps. It’s a perfect solution for lightweight applications where server overhead is unnecessary, and it opens the door for wider sharing of R-based tools in education, reporting, and outreach. However, for more robust enterprise-grade applications, traditional Shiny still holds a crucial role. Understanding the trade-offs between these two options helps developers choose the best tool for the job."
  },
  {
    "objectID": "Website for Employer/shinylive.html#introduction",
    "href": "Website for Employer/shinylive.html#introduction",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive is an exciting new development in the R ecosystem that brings the power of Shiny apps to the browser—without requiring a server. It allows Shiny apps to run entirely on the client-side, meaning users can interact with your app without any backend infrastructure. This makes deployment easier, faster, and more accessible. In this essay, I will explain how Shinylive works, how it differs from traditional Shiny apps, and explore the advantages and limitations of this serverless model."
  },
  {
    "objectID": "Website for Employer/shinylive.html#what-is-shinylive",
    "href": "Website for Employer/shinylive.html#what-is-shinylive",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive is a serverless variant of Shiny developed by Posit. It compiles R code to WebAssembly, allowing the R engine to run inside the user’s web browser. This means that instead of hosting the app on a server (e.g., shinyapps.io or RStudio Connect), the entire app runs locally in the browser—similar to how JavaScript works.\nShinylive is ideal for educational tools, demos, and static site integrations. You can publish these apps using platforms like GitHub Pages or Netlify, making them cost-effective and simple to share."
  },
  {
    "objectID": "Website for Employer/shinylive.html#key-differences-from-traditional-shiny",
    "href": "Website for Employer/shinylive.html#key-differences-from-traditional-shiny",
    "title": "shinylive",
    "section": "",
    "text": "Feature\nTraditional Shiny App\nShinylive\n\n\n\n\nHosting\nRequires R server backend\nRuns entirely in browser\n\n\nDeployment\nVia shinyapps.io, Connect\nVia GitHub Pages, Netlify, etc\n\n\nPerformance\nSupports large data, APIs\nLimited to small/mid-size apps\n\n\nUse Cases\nEnterprise dashboards\nDemos, teaching, public sharing"
  },
  {
    "objectID": "Website for Employer/shinylive.html#pros-and-cons",
    "href": "Website for Employer/shinylive.html#pros-and-cons",
    "title": "shinylive",
    "section": "",
    "text": "No Server Needed: Eliminates the need for infrastructure, which lowers costs and complexity.\nFast Deployment: Apps can be hosted on static sites with minimal configuration.\nGreat for Teaching: Since everything runs in the browser, it’s perfect for showing concepts or simple interactivity.\n\n\n\n\n\nLimited Resources: Shinylive can’t access large databases, external APIs, or long-running computations.\nSize Constraints: Because everything must be processed in-browser, it’s not well-suited for large or sensitive datasets.\nNo Real-Time Backend: Lacks support for server-side operations like authentication, scheduled updates, or cloud processing."
  },
  {
    "objectID": "Website for Employer/shinylive.html#conclusion",
    "href": "Website for Employer/shinylive.html#conclusion",
    "title": "shinylive",
    "section": "",
    "text": "Shinylive represents a significant shift toward low-maintenance, browser-native data apps. It’s a perfect solution for lightweight applications where server overhead is unnecessary, and it opens the door for wider sharing of R-based tools in education, reporting, and outreach. However, for more robust enterprise-grade applications, traditional Shiny still holds a crucial role. Understanding the trade-offs between these two options helps developers choose the best tool for the job."
  },
  {
    "objectID": "Website for Employer/index.html",
    "href": "Website for Employer/index.html",
    "title": "Andrew Mao",
    "section": "",
    "text": "That’s me!"
  },
  {
    "objectID": "Website for Employer/index.html#quick-links",
    "href": "Website for Employer/index.html#quick-links",
    "title": "Andrew Mao",
    "section": "📂 Quick Links",
    "text": "📂 Quick Links\n\n🔗 Featured Projects\n📄 View Resume\n💼 Contact Me"
  },
  {
    "objectID": "Website for Employer/dashboard.html",
    "href": "Website for Employer/dashboard.html",
    "title": "dashboard",
    "section": "",
    "text": "This dashboard explores trends in Streaming Services.\n\n\n\nlibrary(ggplot2) \nggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + labs(title = \"MPG vs Weight\", x = \"Weight\", y = \"MPG\")"
  },
  {
    "objectID": "Website for Employer/dashboard.html#chart-example",
    "href": "Website for Employer/dashboard.html#chart-example",
    "title": "dashboard",
    "section": "",
    "text": "library(ggplot2) \nggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + labs(title = \"MPG vs Weight\", x = \"Weight\", y = \"MPG\")"
  },
  {
    "objectID": "Website for Employer/resume.html",
    "href": "Website for Employer/resume.html",
    "title": "Resume",
    "section": "",
    "text": "You can download my resume here."
  },
  {
    "objectID": "Website for Employer/resume.html#summary",
    "href": "Website for Employer/resume.html#summary",
    "title": "Resume",
    "section": "Summary",
    "text": "Summary\n\n8+ years of experience leading social media and digital marketing strategy across global brands including Niagara Bottling, Monster Energy, Hyatt, and NextShark\nGrew Niagara Bottling’s social audience by 150% and increased engagement by 1500% in under a year, while cutting paid ad spend by 50%\nOversaw full-funnel campaigns at Monster Energy, blending online and offline tactics to strengthen brand presence and drive real-time community engagement\nManaged cross-functional marketing across multiple Hyatt hotels, each generating ~$15M annually, and executed campaigns for large-scale events like the Long Beach Grand Prix\nDirected creative and growth strategy at NextShark, scaling organic reach to 20M+ monthly viewers and evolving the brand into a major voice in Asian American media\nNegotiated key partnerships, including a $250K collaboration with Bumble, to expand brand visibility at Pollen\nSkilled in data-driven strategy, agency management, brand storytelling, and influencer/partnership development\nPassionate about building authentic, results-driven content that connects culture, community, and brand purpose\n\nFor full details, view the downloadable resume or connect with me on LinkedIn."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi, I’m Andrew!\nI’m passionate about integrating creativity within marketing campaigns that drive business! My experience includes creating eye catching social media content, interpreting customer engagement and market trends to develop relevant content integration across various social channels. I’ve worked with top brands such as Monster Energy, Hyatt Hotels, Niagara Bottling, McDonalds, and Moet Henessey!"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Featured Quarto Projects\nNetflix Pricing Strategy Built an interactive Quarto presentation analyzing consumer price sensitivity in the streaming industry. Applied Van Westendorp and Gabor-Granger techniques to assess willingness to pay and strategic bundling across major platforms.\nTitanic Survival Analysis Used Quarto and the {gtsummary} package to explore survival trends on the Titanic. Presented logistic regression and cross-tab analysis to highlight how passenger demographics influenced outcomes.\nBrand Strategy Term Proposal Outlined a strategic marketing plan for a South Korean foodservice brand entering the U.S. Created a Quarto proposal detailing campaign strategy, digital media planning, and Gen Z engagement tactics.\nSummary Tables with gtsummaryl Created a Quarto presentation reflecting on the use of {gtsummary} for summarizing and visualizing statistical models. Demonstrated its role in improving data communication within marketing research."
  },
  {
    "objectID": "shinyapps.html",
    "href": "shinyapps.html",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny is a powerful web application framework for R that enables users to build interactive tools directly from their data analyses. Unlike traditional static reports, Shiny apps allow users to manipulate inputs and immediately see changes reflected in outputs, making them particularly valuable for data exploration, dashboards, and decision-support tools. In this essay, I will introduce the core concepts behind Shiny, explain how it works, and offer practical use cases to demonstrate its potential.\n\n\n\nShiny, developed by RStudio (now Posit), is an R package that makes it easy to build web applications using only R code—no JavaScript or HTML required. It bridges the gap between statistical analysis and user interaction, making it possible to present complex data in a dynamic, user-friendly format.\nAt its core, a Shiny app consists of two parts: - UI (User Interface): Defines the layout of the app, including inputs (like sliders and dropdowns) and outputs (like tables or plots). - Server: Contains the R code that reacts to user inputs and generates the corresponding output.\nThese two components work together using Shiny’s reactive programming model, which tracks changes in inputs and automatically re-runs the necessary code to update outputs.\n\n\n\nImagine we are working with sales data across multiple regions and years. Using Shiny, we could create an app that allows a marketing manager to: - Select a specific region from a dropdown menu. - Filter by year using a slider. - View real-time updates to a bar chart and summary table of sales performance.\nThis kind of app makes data exploration far more accessible for non-technical team members, encouraging data-driven decision-making without needing to write code.\n\n\n\nShiny is widely used in industries ranging from healthcare to finance. Some common applications include: - Interactive dashboards for monitoring KPIs. - Simulation tools for scenario testing. - Data entry forms and internal tools for analysts.\nIts integration with the tidyverse and support for packages like plotly, DT, and ggplot2 allows for a seamless and customizable experience.\n\n\n\nIn summary, Shiny represents a major advancement in how data can be shared, understood, and acted upon. It empowers R users to build tools that are not only functional but also engaging and user-centric. Whether you’re presenting research findings or building a decision support system, Shiny can turn a static analysis into an interactive experience that delivers real value."
  },
  {
    "objectID": "shinyapps.html#introduction",
    "href": "shinyapps.html#introduction",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny is a powerful web application framework for R that enables users to build interactive tools directly from their data analyses. Unlike traditional static reports, Shiny apps allow users to manipulate inputs and immediately see changes reflected in outputs, making them particularly valuable for data exploration, dashboards, and decision-support tools. In this essay, I will introduce the core concepts behind Shiny, explain how it works, and offer practical use cases to demonstrate its potential."
  },
  {
    "objectID": "shinyapps.html#what-is-shiny",
    "href": "shinyapps.html#what-is-shiny",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny, developed by RStudio (now Posit), is an R package that makes it easy to build web applications using only R code—no JavaScript or HTML required. It bridges the gap between statistical analysis and user interaction, making it possible to present complex data in a dynamic, user-friendly format.\nAt its core, a Shiny app consists of two parts: - UI (User Interface): Defines the layout of the app, including inputs (like sliders and dropdowns) and outputs (like tables or plots). - Server: Contains the R code that reacts to user inputs and generates the corresponding output.\nThese two components work together using Shiny’s reactive programming model, which tracks changes in inputs and automatically re-runs the necessary code to update outputs."
  },
  {
    "objectID": "shinyapps.html#teaching-example",
    "href": "shinyapps.html#teaching-example",
    "title": "shinyapps",
    "section": "",
    "text": "Imagine we are working with sales data across multiple regions and years. Using Shiny, we could create an app that allows a marketing manager to: - Select a specific region from a dropdown menu. - Filter by year using a slider. - View real-time updates to a bar chart and summary table of sales performance.\nThis kind of app makes data exploration far more accessible for non-technical team members, encouraging data-driven decision-making without needing to write code."
  },
  {
    "objectID": "shinyapps.html#use-cases-and-applications",
    "href": "shinyapps.html#use-cases-and-applications",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny is widely used in industries ranging from healthcare to finance. Some common applications include: - Interactive dashboards for monitoring KPIs. - Simulation tools for scenario testing. - Data entry forms and internal tools for analysts.\nIts integration with the tidyverse and support for packages like plotly, DT, and ggplot2 allows for a seamless and customizable experience."
  },
  {
    "objectID": "shinyapps.html#conclusion",
    "href": "shinyapps.html#conclusion",
    "title": "shinyapps",
    "section": "",
    "text": "In summary, Shiny represents a major advancement in how data can be shared, understood, and acted upon. It empowers R users to build tools that are not only functional but also engaging and user-centric. Whether you’re presenting research findings or building a decision support system, Shiny can turn a static analysis into an interactive experience that delivers real value."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Contact Me\nI’m free and open to learning more about you!\n\nEmail: Andrew.B.Mao@Gmail.com\nBased in Los Angeles\nOnline Creative Portfolio: Andrewbmao.squarespace.com"
  },
  {
    "objectID": "Github Presentation Final.html#introduction",
    "href": "Github Presentation Final.html#introduction",
    "title": "Streaming As A Service",
    "section": "INTRODUCTION",
    "text": "INTRODUCTION\nStreaming services have transformed the way people watch their favorite shows, movies, and sports by moving to a Subscription Video on Demand (SVOD) model. Bundling subscriptions has gained prominence due to convenience and perceived value, yet pricing these bundles is challenging because consumer willingness to pay varies significantly across demographics and preferences.\nThis project explores methodologies for optimal bundle pricing, aiming to:\n\nEnhance understanding of consumer behavior\nInform effective pricing decisions\nRefine methods for assessing willingness to pay (WTP)"
  },
  {
    "objectID": "Github Presentation Final.html#questions",
    "href": "Github Presentation Final.html#questions",
    "title": "Streaming As A Service",
    "section": "Questions?",
    "text": "Questions?"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "You can download my resume here."
  },
  {
    "objectID": "resume.html#summary",
    "href": "resume.html#summary",
    "title": "Resume",
    "section": "Summary",
    "text": "Summary\n\n8+ years of experience leading social media and digital marketing strategy across global brands including Niagara Bottling, Monster Energy, Hyatt, and NextShark\nGrew Niagara Bottling’s social audience by 150% and increased engagement by 1500% in under a year, while cutting paid ad spend by 50%\nOversaw full-funnel campaigns at Monster Energy, blending online and offline tactics to strengthen brand presence and drive real-time community engagement\nManaged cross-functional marketing across multiple Hyatt hotels, each generating ~$15M annually, and executed campaigns for large-scale events like the Long Beach Grand Prix\nDirected creative and growth strategy at NextShark, scaling organic reach to 20M+ monthly viewers and evolving the brand into a major voice in Asian American media\nNegotiated key partnerships, including a $250K collaboration with Bumble, to expand brand visibility at Pollen\nSkilled in data-driven strategy, agency management, brand storytelling, and influencer/partnership development\nPassionate about building authentic, results-driven content that connects culture, community, and brand purpose\n\nFor full details, view the downloadable resume or connect with me on LinkedIn."
  },
  {
    "objectID": "dashboard.html",
    "href": "dashboard.html",
    "title": "dashboard",
    "section": "",
    "text": "This dashboard explores trends in Streaming Services.\n\n\n\nlibrary(ggplot2) \nggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + labs(title = \"MPG vs Weight\", x = \"Weight\", y = \"MPG\")"
  },
  {
    "objectID": "dashboard.html#chart-example",
    "href": "dashboard.html#chart-example",
    "title": "dashboard",
    "section": "",
    "text": "library(ggplot2) \nggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + labs(title = \"MPG vs Weight\", x = \"Weight\", y = \"MPG\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrew Mao",
    "section": "",
    "text": "That’s me!"
  },
  {
    "objectID": "index.html#quick-links",
    "href": "index.html#quick-links",
    "title": "Andrew Mao",
    "section": "📂 Quick Links",
    "text": "📂 Quick Links\n\n🔗 Featured Projects\n📄 View Resume\n💼 Contact Me"
  },
  {
    "objectID": "Website for Employer/contact.html",
    "href": "Website for Employer/contact.html",
    "title": "Contact",
    "section": "",
    "text": "Contact Me\nI’m free and open to learning more about you!\n\nEmail: Andrew.B.Mao@Gmail.com\nBased in Los Angeles\nOnline Creative Portfolio: Andrewbmao.squarespace.com"
  },
  {
    "objectID": "Website for Employer/shinyapps.html",
    "href": "Website for Employer/shinyapps.html",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny is a powerful web application framework for R that enables users to build interactive tools directly from their data analyses. Unlike traditional static reports, Shiny apps allow users to manipulate inputs and immediately see changes reflected in outputs, making them particularly valuable for data exploration, dashboards, and decision-support tools. In this essay, I will introduce the core concepts behind Shiny, explain how it works, and offer practical use cases to demonstrate its potential.\n\n\n\nShiny, developed by RStudio (now Posit), is an R package that makes it easy to build web applications using only R code—no JavaScript or HTML required. It bridges the gap between statistical analysis and user interaction, making it possible to present complex data in a dynamic, user-friendly format.\nAt its core, a Shiny app consists of two parts: - UI (User Interface): Defines the layout of the app, including inputs (like sliders and dropdowns) and outputs (like tables or plots). - Server: Contains the R code that reacts to user inputs and generates the corresponding output.\nThese two components work together using Shiny’s reactive programming model, which tracks changes in inputs and automatically re-runs the necessary code to update outputs.\n\n\n\nImagine we are working with sales data across multiple regions and years. Using Shiny, we could create an app that allows a marketing manager to: - Select a specific region from a dropdown menu. - Filter by year using a slider. - View real-time updates to a bar chart and summary table of sales performance.\nThis kind of app makes data exploration far more accessible for non-technical team members, encouraging data-driven decision-making without needing to write code.\n\n\n\nShiny is widely used in industries ranging from healthcare to finance. Some common applications include: - Interactive dashboards for monitoring KPIs. - Simulation tools for scenario testing. - Data entry forms and internal tools for analysts.\nIts integration with the tidyverse and support for packages like plotly, DT, and ggplot2 allows for a seamless and customizable experience.\n\n\n\nIn summary, Shiny represents a major advancement in how data can be shared, understood, and acted upon. It empowers R users to build tools that are not only functional but also engaging and user-centric. Whether you’re presenting research findings or building a decision support system, Shiny can turn a static analysis into an interactive experience that delivers real value."
  },
  {
    "objectID": "Website for Employer/shinyapps.html#introduction",
    "href": "Website for Employer/shinyapps.html#introduction",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny is a powerful web application framework for R that enables users to build interactive tools directly from their data analyses. Unlike traditional static reports, Shiny apps allow users to manipulate inputs and immediately see changes reflected in outputs, making them particularly valuable for data exploration, dashboards, and decision-support tools. In this essay, I will introduce the core concepts behind Shiny, explain how it works, and offer practical use cases to demonstrate its potential."
  },
  {
    "objectID": "Website for Employer/shinyapps.html#what-is-shiny",
    "href": "Website for Employer/shinyapps.html#what-is-shiny",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny, developed by RStudio (now Posit), is an R package that makes it easy to build web applications using only R code—no JavaScript or HTML required. It bridges the gap between statistical analysis and user interaction, making it possible to present complex data in a dynamic, user-friendly format.\nAt its core, a Shiny app consists of two parts: - UI (User Interface): Defines the layout of the app, including inputs (like sliders and dropdowns) and outputs (like tables or plots). - Server: Contains the R code that reacts to user inputs and generates the corresponding output.\nThese two components work together using Shiny’s reactive programming model, which tracks changes in inputs and automatically re-runs the necessary code to update outputs."
  },
  {
    "objectID": "Website for Employer/shinyapps.html#teaching-example",
    "href": "Website for Employer/shinyapps.html#teaching-example",
    "title": "shinyapps",
    "section": "",
    "text": "Imagine we are working with sales data across multiple regions and years. Using Shiny, we could create an app that allows a marketing manager to: - Select a specific region from a dropdown menu. - Filter by year using a slider. - View real-time updates to a bar chart and summary table of sales performance.\nThis kind of app makes data exploration far more accessible for non-technical team members, encouraging data-driven decision-making without needing to write code."
  },
  {
    "objectID": "Website for Employer/shinyapps.html#use-cases-and-applications",
    "href": "Website for Employer/shinyapps.html#use-cases-and-applications",
    "title": "shinyapps",
    "section": "",
    "text": "Shiny is widely used in industries ranging from healthcare to finance. Some common applications include: - Interactive dashboards for monitoring KPIs. - Simulation tools for scenario testing. - Data entry forms and internal tools for analysts.\nIts integration with the tidyverse and support for packages like plotly, DT, and ggplot2 allows for a seamless and customizable experience."
  },
  {
    "objectID": "Website for Employer/shinyapps.html#conclusion",
    "href": "Website for Employer/shinyapps.html#conclusion",
    "title": "shinyapps",
    "section": "",
    "text": "In summary, Shiny represents a major advancement in how data can be shared, understood, and acted upon. It empowers R users to build tools that are not only functional but also engaging and user-centric. Whether you’re presenting research findings or building a decision support system, Shiny can turn a static analysis into an interactive experience that delivers real value."
  },
  {
    "objectID": "Website for Employer/projects.html",
    "href": "Website for Employer/projects.html",
    "title": "Projects",
    "section": "",
    "text": "Featured Quarto Projects\nNetflix Pricing Strategy Built an interactive Quarto presentation analyzing consumer price sensitivity in the streaming industry. Applied Van Westendorp and Gabor-Granger techniques to assess willingness to pay and strategic bundling across major platforms.\nTitanic Survival Analysis Used Quarto and the {gtsummary} package to explore survival trends on the Titanic. Presented logistic regression and cross-tab analysis to highlight how passenger demographics influenced outcomes.\nBrand Strategy Term Proposal Outlined a strategic marketing plan for a South Korean foodservice brand entering the U.S. Created a Quarto proposal detailing campaign strategy, digital media planning, and Gen Z engagement tactics.\nSummary Tables with gtsummaryl Created a Quarto presentation reflecting on the use of {gtsummary} for summarizing and visualizing statistical models. Demonstrated its role in improving data communication within marketing research."
  },
  {
    "objectID": "Website for Employer/about.html",
    "href": "Website for Employer/about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi, I’m Andrew!\nI’m passionate about integrating creativity within marketing campaigns that drive business! My experience includes creating eye catching social media content, interpreting customer engagement and market trends to develop relevant content integration across various social channels. I’ve worked with top brands such as Monster Energy, Hyatt Hotels, Niagara Bottling, McDonalds, and Moet Henessey!"
  },
  {
    "objectID": "Final js Slide.html#introduction",
    "href": "Final js Slide.html#introduction",
    "title": "Streaming As A Service",
    "section": "INTRODUCTION",
    "text": "INTRODUCTION\nStreaming services have transformed the way people watch their favorite shows, movies, and sports by moving to a Subscription Video on Demand (SVOD) model. Bundling subscriptions has gained prominence due to convenience and perceived value, yet pricing these bundles is challenging because consumer willingness to pay varies significantly across demographics and preferences.\nThis project explores methodologies for optimal bundle pricing, aiming to:\n\nEnhance understanding of consumer behavior\nInform effective pricing decisions\nRefine methods for assessing willingness to pay (WTP)"
  },
  {
    "objectID": "Final js Slide.html#questions",
    "href": "Final js Slide.html#questions",
    "title": "Streaming As A Service",
    "section": "Questions?",
    "text": "Questions?"
  }
]