{
  "hash": "8746dcdfbc0c3337aece35ffd4dc2eb5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Streaming As A Service\"\nauthor: \"Andrew Mao\"\nclass: \"IBM 6400, Cal Poly Pomona\"\ndate: \"March 24, 2025\"\nformat: \n  revealjs:\n    theme: serif\n    width: 1600\n    height: 900\n    footer: Streaming As A Service\n    transition: slide\n    transition-speed: default\n    incremental: false\n    toc: true\n    toc-depth: 1\n    slide-number: true\n    scrollable: true\n    smaller: true\n    code-fold: false\n    code-overflow: wrap\n    number-sections: false\n    number-depth: 5\n    embed-resources: true\n    css: styles.css\neditor: visual\nexecute: \n  echo: true\n  freeze: auto\n---\n\n\n\n## INTRODUCTION\n\nStreaming services have transformed the way people watch their favorite shows, movies, and sports by moving to a Subscription Video on Demand (SVOD) model. **Bundling** subscriptions has gained prominence due to **convenience** and **perceived value**, yet **pricing** these bundles is challenging because consumer **willingness to pay** varies significantly across demographics and preferences.\n\nThis project explores methodologies for **optimal bundle pricing**, aiming to:\n\n-   Enhance understanding of consumer behavior\n\n-   Inform effective pricing decisions\n\n-   Refine methods for assessing willingness to pay (WTP)\\\n\n    ---\n\n# PROBLEM STATEMENT\n\nFrequent and sometimes high price increases at established services (e.g., Netflix) have sparked user backlash, while competitor platforms (Disney+, Hulu, Amazon Prime Video) expand content libraries or bundle multiple offerings under a single rate. Meanwhile, ad-supported tiers introduce additional complexity when setting optimal prices.\n\n**Key Managerial Problem**\n\n> Streaming services must balance **competitive pricing** and **profitability** while meeting diverse consumer expectations regarding content, ads, and budget constraints.\n\n# ANALYTICS OBJECTIVES\n\nWe specifically seek to:\n\n1.  **Compare** Van Westendorp’s Price Sensitivity Meter, the Gabor-Granger Method, and Conjoint Analysis to assess willingness to pay (WTP) for streaming bundles.\n\n2.  **Identify** consumer price thresholds, feature trade-offs, and optimal pricing strategies.\n\n3.  **Develop** a **unified pricing framework** that synthesizes multiple methods for robust decision-making.\n\n# KEY METHODS\n\n1.  1\\. Van Westendorp’s Price Sensitivity Meter (PSM)\n\n    -   Analyzes acceptable price ranges and psychological price points.\n\n    -   Identifies the **optimal pricing window** that balances perceived affordability and quality.\n\n    ## 2. Conjoint Analysis\n\n    -   Evaluates **price sensitivity** in the context of multiple attributes (e.g., ad levels, content variety).\n\n    -   Identifies **feature trade-offs** and segments customers based on their preferences.\n\n    ## 3. Gabor-Granger Method\n\n    -   Tests consumer purchase likelihood at **various price points** (e.g., \\$7.99, \\$9.99, \\$12.99).\n\n    -   Helps determine **price elasticity** and potential **revenue-maximizing** points.\n\n    ## 4. Integrative Synthesis\n\n    -   Compares and contrasts insights from all three methods to **spot discrepancies** in stated willingness to pay vs. actual price thresholds.\n\n    -   Aims to **bridge gaps** between theoretical price sensitivity and real-world pricing decisions.\n\n# EXAMPLE CHART\n\nBelow is a simple demonstration of how you might illustrate demand curves.\n\n```         \n\n::: {.cell}\n\n```{.r .cell-code}\n# A sample plot (dummy data)\nprice_points <- c(7.99, 9.99, 12.99, 14.99, 17.99)\ndemand_pct   <- c(80, 68, 52, 35, 20)\n\nplot(\n  price_points, demand_pct,\n  type = \"b\", \n  main = \"Illustrative Demand Curve\",\n  xlab = \"Price (USD/month)\", \n  ylab = \"Subscription Likelihood (%)\"\n)\n```\n\n::: {.cell-output-display}\n![](Github-Presentation-Final_files/figure-revealjs/sample-demand-1.png){width=960}\n:::\n:::\n\n## Questions?\n",
    "supporting": [
      "Github-Presentation-Final_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}